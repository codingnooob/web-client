<!DOCTYPE html>
<html class="is-loading" data-loading="Authenticating">

<head>
  <!-- @import "app-head.kit" -->
  <title>Cryptee | Home</title>
  <link rel="stylesheet" type="text/css" href="../css/home.css">
</head>

<body class="home-body is-loading">
  <progress id="main-progress" class="no-print progress is-small is-success" value="100" max="100"></progress>

  <!-- @import "home-app-nav.kit" -->

  <!-- @import "home-welcome-card.kit" -->

  <!-- @import "home-news-card.kit" -->

  <!-- @import "modal-help.kit" -->
  <!-- @import "modal-donate.html" -->
  <!-- @import "modal-webapp.kit" -->
  <!-- @import "footer-js.kit" -->

  <script type="text/javascript">
  var theUser, theUsername, theEmail, metaRef, theUserID;
  var keyToRemember = JSON.parse(sessionStorage.getItem('key')); // hashedkey

  loadUserDetailsFromLS();
  checkLatestVersion();

  $(window).scroll(function() {
    if ($(this).scrollTop() > 100) {
      $('#home-welcome-card, #home-news-card').addClass('newsOn');
    } else {
      $('#home-welcome-card, #home-news-card').removeClass('newsOn');
    }
  });

  function formatBytes(bytes,decimals) {
     if (bytes === 0) { return '0 Bytes'; }
     var k = 1000,
         dm = decimals + 1 || 3,
         sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
         i = Math.floor(Math.log(bytes) / Math.log(k));
     return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
  }

  key('d', function(){
    window.location = "docs";
     return false;
  });

  key('p', function(){
    window.location = "photos";
     return false;
  });

  firebase.auth().onAuthStateChanged(function(user) {
    if (!user) {
      webAppURLController("signin?redirect=home");
    } else {
      //got user
      theUser = user;
      theUsername = theUser.displayName;
      theEmail = theUser.email;
      theUserID = theUser.uid;
      metaRef = db.ref().child('/users/' + theUserID + "/meta/");
      dataRef = db.ref().child('/users/' + theUserID + "/data/");
      setSentryUser(theUserID);
      checkForExistingUser(function(){
        gotUser();
        webAppURLController();
      });
    }
  }, function(error){
    if (error.code !== "auth/network-request-failed") {
      handleError("Error Authenticating", error);
    }
  });

  function checkForExistingUser (callback){
    callback = callback || noop;
    db.ref('/users/' + theUserID + "/data/keycheck").once('value').then(function(snapshot) {
      if (snapshot.val() === null) {
        window.location = "signup?status=newuser";
      } else {
        callback();
      }
    });
  }

  function gotUser() {
    $('.username').html(theUsername || theEmail);
    metaRef.on('value', function(snapshot) {  gotUserMeta(snapshot.val());  });

    dataRef.child("preferences").on('value', function(snapshot) {
      gotPreferences(snapshot.val());
    });

  }

  function gotUserMeta (meta) {
    var usedStorage = 0;
    allowedStorage = freeUserQuotaInBytes;

    if (meta) {
      if (meta.usedStorage) {
        usedStorage = meta.usedStorage - 100000;
        if (usedStorage <= 0) { usedStorage = 0; } else { usedStorage = meta.usedStorage; }
      }
      if (meta.allowedStorage) {
        allowedStorage = meta.allowedStorage;
      }
    }

    $('#settings-storage-used').html(formatBytes(usedStorage, 0));
    $('.settings-storage-total').html(formatBytes(allowedStorage, 0));
    $(".usage-progress").attr("value", usedStorage).attr("max", allowedStorage);

    
    var paid = false;
    if (allowedStorage > 9999999999) {
      $("#upgrade-button, #donate-button").fadeOut(500);
      $(".early-adopter-card").hide();
      $(".paid-user-card").show();
      paid = true;
    }

    saveUserDetailsToLS(theUsername, usedStorage, allowedStorage, paid);
  }

  $(".home-item").on('click', function(event) {
    $(this).addClass('is-loading');
  });

  setTimeout(function () {
    sessionStorage.removeItem('key');
  }, 120000); // 2 minutes later if user still haven't made a choice, remove key from session storage

  checkConnection (function(status){
    if (!status) {
      $(".hiddenForOffline").hide();
      $(".shownForOffline").show();
      $(".disabledForOffline").addClass('disabled');
      $("#main-progress").removeClass('is-success is-warning').addClass('is-info');
    }
  });

  if (isInWebAppiOS || isInWebAppChrome) {
    $("#settings-button").css({"right" : "2.5rem"});
  }

  </script>
</body></html>
